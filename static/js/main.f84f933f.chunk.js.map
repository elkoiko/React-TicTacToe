{"version":3,"sources":["Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Square","props","className","hasWon","hasNoWinner","onClick","onClickOnSquare","index","player","Board","renderSquare","i","winningLine","includes","squares","isPartyOver","Game","status","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","handleClickOnSquare","useCallback","tmpHistory","slice","length","calculateWinner","concat","jumpTo","step","current","winner","moves","map","move","desc","key","lines","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f84f933f.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport './Game.css';\n\ninterface SquareProps {\n    onClickOnSquare: HandleClickOnSquare\n    player: string;\n    index: number;\n    hasWon: boolean;\n    hasNoWinner: boolean;\n}\n\nconst Square: React.FC<SquareProps> = (props) => {\n    return (\n        <button\n            className={\"Square \" + (props.hasWon ? \"Square--won \" : \"\") + (props.hasNoWinner ? \"Square--noWinner \" : \"\")}\n            onClick={() => props.onClickOnSquare(props.index)}\n        >\n            {props.player}\n        </button>\n    );\n};\n\ninterface BoardProps {\n    squares: Array<string>;\n    onClickOnSquare: HandleClickOnSquare;\n    winningLine: Array<number>;\n    isPartyOver: boolean;\n}\n\nconst Board: React.FC<BoardProps> = (props) => {\n\n    function renderSquare(i: number) {\n        const hasWon = props.winningLine.includes(i);\n        return (\n            <Square\n                player={props.squares[i]}\n                onClickOnSquare={props.onClickOnSquare}\n                index={i}\n                hasWon={hasWon}\n                hasNoWinner={(props.isPartyOver && !hasWon) ? true : false}\n            />);\n    }\n\n    return (\n        <div className=\"Game__Board\">\n            <div className=\"Board__Row\">\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n            </div>\n            <div className=\"Board__Row\">\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n            </div>\n            <div className=\"Board__Row\">\n                {renderSquare(6)}\n                {renderSquare(7)}\n                {renderSquare(8)}\n            </div>\n        </div>\n    );\n};\n\nexport const Game: React.FC = () => {\n\n    const [history, setHistory] = useState<GameHistory>(\n        [\n            {\n                squares: Array(9).fill(null),\n            }\n        ]\n    );\n    const [stepNumber, setStepNumber] = useState(0);\n    const [xIsNext, setXIsNext] = useState(true);\n\n    const handleClickOnSquare = useCallback((index: number) => {\n        const tmpHistory = history.slice(0, stepNumber + 1);\n        const current = tmpHistory[tmpHistory.length - 1];\n        const squares = current.squares.slice();\n\n        // Ignore click if has won or square is already filled\n        if (calculateWinner(squares)[0] || squares[index]) return;\n\n        squares[index] = xIsNext ? 'X' : 'O';\n        setHistory(tmpHistory.concat(\n            [{\n                squares: squares,\n            }]\n        ));\n        setStepNumber(tmpHistory.length);\n        setXIsNext(!xIsNext);\n    }, [history, stepNumber, xIsNext]);\n\n    const jumpTo = useCallback((step: number) => {\n        setHistory(\n            history.slice(0, step + 1)\n        );\n        setStepNumber(step);\n        setXIsNext((step % 2) === 0);\n    }, [history]);\n\n    const current = history[stepNumber];\n    const [winner, winningLine] = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n        const desc = move ?\n            'Go back to move nÂ°' + move :\n            'Go back to the start of the party';\n\n        return (\n            <li key={move}>\n                <button onClick={() => jumpTo(move)}>{desc}</button>\n            </li>\n        );\n    });\n\n    let status: string;\n    if (winner) {\n        status = winner + ' won !';\n    } else {\n        status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n    }\n\n    return (\n        <div className=\"Game\">\n            <Board\n                squares={current.squares}\n                onClickOnSquare={handleClickOnSquare}\n                winningLine={winningLine}\n                isPartyOver={(history.length >= 10) ? true : false }\n            />\n            <div className=\"Game__Info\">\n                <p className=\"Game__Status\">{status}</p>\n                <ol>{moves}</ol>\n            </div>\n        </div>\n    );\n}\n\n// Verifies if there is a winner\n// Returns [null , null] if not or a tuple with the letter that has won\n// and an array containing the indexes of winning line\nfunction calculateWinner(squares: Array<string>): [string | null, Array<number>] {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return [squares[a], lines[i]];\n        }\n    }\n    return [null, Array<number>(0)];\n}","import React from 'react';\nimport './App.css';\nimport { Game } from './Game';\n\nfunction App() {\n  return (\n    <>\n      <h1 className=\"App__Title\">React TicTacToe</h1>\n      <Game />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}